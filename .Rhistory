showNonASCIIfile("hello.R")
showNonASCII("hello.R")
showNonASCII("Please cite as: \nMathur MB \& VanderWeele TJ. New metrics for meta-analyses of heterogeneous effects. Statistics in Medicine (2018).")
showNonASCIIfile("hello.R")
showNonASCII("Please cite as: Mathur MB and VanderWeele TJ. New metrics for meta-analyses of heterogeneous effects. Statistics in Medicine (2018).")
document()
build()
check()
?assign
document()
build()
check()
document()
build()
check()
document()
build()
check()
?globalVariables
globalVariables(c("x.values", "y.values"))
x.values
document()
build()
check()
document()
build()
check()
x = 2
new.value = x + "2"
safe_function = function(x) {
tryCatch( {
# try to add 2 to x in a way that breaks
new.value = x + "2"
}, error = function(err) {
message("Initial attempt failed. Trying another method.")
# needs to be superassignment because inside fn
new.value <<- assign( x = "new.value",
value = x + 2,
envir=globalenv() )
} )
}
safe_function(2)
safe_function = function(x) {
tryCatch( {
# try to add 2 to x in a way that breaks
new.value = x + "2"
}, error = function(err) {
message("Initial attempt failed. Trying another method.")
# needs to be superassignment because inside fn
new.value <<- assign( x = "new.value",
value = x + 2,
envir=globalenv() )
} )
return(new.value)
}
safe_function(2)
safe_function = function(x) {
tryCatch( {
# try to add 2 to x in a way that breaks
new.value = x + "2"
}, error = function(err) {
message("Initial attempt failed. Trying another method.")
# needs to be superassignment because inside fn
new.value <<- assign( x = "new.value",
value = x + 2,
envir=globalenv() )
} )
return(new.value)
}
safe_function(2)
# this function adds 2 to x
safe_function = function(x) {
tryCatch( {
# try to add 2 to x in a stupid way that breaks
new.value = x + "2"
}, error = function(err) {
message("Initial attempt failed. Trying another method.")
# needs to be superassignment because inside fn
assign( x = "new.value",
value = x + 2,
envir=globalenv() )
} )
return(new.value)
}
safe_function(2)
source("hello.R")
?prop_stronger
prop_stronger( q = log(0.9),
M = as.numeric(m$b),
t2 = m$tau2,
se.M = as.numeric(m$vb),
se.t2 = m$se.tau2,
CI.level = 0.95,
tail = "below",
# below arguments control bootstrapping
# only 100 iterates for demo purposes (should be higher in practice)
dat = d,
R = 100,
bootstrap = "ifneeded",
yi.name = "yi",
vi.name = "vi" )
source("hello.R")
prop_stronger( q = log(0.9),
M = as.numeric(m$b),
t2 = m$tau2,
se.M = as.numeric(m$vb),
se.t2 = m$se.tau2,
CI.level = 0.95,
tail = "below",
# below arguments control bootstrapping
# only 100 iterates for demo purposes (should be higher in practice)
dat = d,
R = 100,
bootstrap = "ifneeded",
yi.name = "yi",
vi.name = "vi" )
source("hello.R")
prop_stronger( q = log(0.9),
M = as.numeric(m$b),
t2 = m$tau2,
se.M = as.numeric(m$vb),
se.t2 = m$se.tau2,
CI.level = 0.95,
tail = "below",
# below arguments control bootstrapping
# only 100 iterates for demo purposes (should be higher in practice)
dat = d,
R = 100,
bootstrap = "ifneeded",
yi.name = "yi",
vi.name = "vi" )
document()
build()
document()
check()
?tau_CI
d = metafor::escalc(measure="RR", ai=tpos, bi=tneg,
ci=cpos, di=cneg, data=metafor::dat.bcg)
# fit random-effects model
# note that metafor package returns on the log scale
m = metafor::rma.uni(yi= d$yi, vi=d$vi, knha=TRUE,
measure="RR", method="REML" )
tau_CI(m)
m
0.3132 + 1.96*0.1664
sqrt( 0.639344)
tau_CI(m, CI.level=.7)
?prop_stronger
library(MetaUtility)
library(devtools)
expect_equal( 1,
prop_stronger( q = .5, M = .6, se.M = sqrt(.07), t2 = 0.2, se.t2=sqrt(0.02),
CI.level=0.95, tail = "above" )$Est +
prop_stronger( q = .5, M = .6, se.M = sqrt(.07), t2 = 0.2, se.t2=sqrt(0.02),
CI.level=0.95, tail = "below" )$Est
)
library(testthat)
# proportion above and below should sum to 1
expect_equal( 1,
prop_stronger( q = .5, M = .6, se.M = sqrt(.07), t2 = 0.2, se.t2=sqrt(0.02),
CI.level=0.95, tail = "above" )$Est +
prop_stronger( q = .5, M = .6, se.M = sqrt(.07), t2 = 0.2, se.t2=sqrt(0.02),
CI.level=0.95, tail = "below" )$Est
)
q = 0.5
M = 0.6
se.M = sqrt(0.07)
t2 = 0.2
se.t2 = 0.02
CI.level = 0.9
phat = prop_stronger( q = q, M = M, se.M = se.M, t2 = t2, se.t2=se.t2,
CI.level=CI.level, tail = "above" )
phat
phat = prop_stronger( q = q, M = M, se.M = se.M, t2 = t2, se.t2=se.t2,
CI.level=CI.level, tail = "above" )
expect_equal( 1 - pnorm( ( q - M ) / sqrt( t2 ) ), phat$Est )
expect_equal( sqrt( (se.M^2 / t2) + ( ( se.t2^2 * (q - M)^2 ) / ( 4 * t2^3 ) ) ) * dnorm( ( q - M ) / sqrt( t2 ) ),
phat$SE )
alpha = 1 - CI.level
crit = qnorm( 1 - alpha/2 )
expect_equal( min( 1, phat$Est + phat$SE * crit ), phat$CI.hi )
expect_equal( max( 0, phat$Est - phat$SE * crit ), phat$CI.lo )
expect_equal( 1 - pnorm( ( q - M ) / sqrt( t2 ) ), phat$Est )
expect_equal( sqrt( (se.M^2 / t2) + ( ( se.t2^2 * (q - M)^2 ) / ( 4 * t2^3 ) ) ) * dnorm( ( q - M ) / sqrt( t2 ) ),
phat$SE )
alpha = 1 - CI.level
crit = qnorm( 1 - alpha/2 )
expect_equal( min( 1, phat$Est + phat$SE * crit ), phat$CI.hi )
expect_equal( max( 0, phat$Est - phat$SE * crit ), phat$CI.lo )
phat
expect_equal( min( 1, phat$Est + phat$SE * crit ), phat$hi )
expect_equal( max( 0, phat$Est - phat$SE * crit ), phat$lo )
# proportion below a preventive effect
q = 0.6
M = -0.2
se.M = sqrt(0.002)
t2 = 0.4
se.t2 = sqrt(0.02)
CI.level = 0.75
phat = stronger_than( q = q, M = M, se.M = se.M, t2 = t2, se.t2=se.t2,
CI.level=CI.level, tail = "below" )
phat = prop_stronger( q = q, M = M, se.M = se.M, t2 = t2, se.t2=se.t2,
CI.level=CI.level, tail = "below" )
q
M
# proportion below a preventive effect
q = 0
M = -0.2
se.M = sqrt(0.002)
t2 = 0.4
se.t2 = sqrt(0.02)
CI.level = 0.75
phat = prop_stronger( q = q, M = M, se.M = se.M, t2 = t2, se.t2=se.t2,
CI.level=CI.level, tail = "below" )
expect_equal( pnorm( ( q - M ) / sqrt( t2 ) ), st$Est )
phat = prop_stronger( q = q, M = M, se.M = se.M, t2 = t2, se.t2=se.t2,
CI.level=CI.level, tail = "below" )
expect_equal( pnorm( ( q - M ) / sqrt( t2 ) ), phat$Est )
expect_equal( sqrt( (se.M^2 / t2) + ( ( se.t2^2 * (q - M)^2 ) / ( 4 * t2^3 ) ) ) * dnorm( ( q - M ) / sqrt( t2 ) ),
phat$SE )
alpha = 1 - CI.level
crit = qnorm( 1 - alpha/2 )
alpha = 1 - CI.level
crit = qnorm( 1 - alpha/2 )
expect_equal( min( 1, phat$Est + phat$SE * crit ), phat$hi )
expect_equal( max( 0, phat$Est - phat$SE * crit ), phat$lo )
?prop_stronger
document()
build()
test()
build()
build()
document()
build()
check()
41/60
source('~/Dropbox/Personal computer/Independent studies/MetaUtility R package/MetaUtility/R/functions.R')
library(metafor)
?dat.bcg
# replication estimates (Fisher's z scale) and SEs
# from moral credential example in Mathur & VanderWeele
# (in preparation)
r.fis = c(0.303, 0.078, 0.113, -0.055, 0.056, 0.073,
0.263, 0.056, 0.002, -0.106, 0.09, 0.024, 0.069, 0.074,
0.107, 0.01, -0.089, -0.187, 0.265, 0.076, 0.082)
r.SE = c(0.111, 0.092, 0.156, 0.106, 0.105, 0.057,
0.091, 0.089, 0.081, 0.1, 0.093, 0.086, 0.076,
0.094, 0.065, 0.087, 0.108, 0.114, 0.073, 0.105, 0.04)
# meta-analyze the replications
library(metafor)
m = rma.uni( yi = r.fis, vi = r.SE^2, measure = "ZCOR" )
?prop_stronger
d = data.frame( yi = r.fis,
vi = r.SE^2 )
prop_stronger( q = q,
M = m$b,
t2 = m$tau2,
se.t2 = m$se.tau2,
tail = "above",
dat = d,
R = 100 )
m
prop_stronger( q = q,
M = m$b,
se.M = m$se,
t2 = m$tau2,
se.t2 = m$se.tau2,
tail = "above",
dat = d,
R = 100 )
q
r.fis = c(0.303, 0.078, 0.113, -0.055, 0.056, 0.073,
0.263, 0.056, 0.002, -0.106, 0.09, 0.024, 0.069, 0.074,
0.107, 0.01, -0.089, -0.187, 0.265, 0.076, 0.082)
r.SE = c(0.111, 0.092, 0.156, 0.106, 0.105, 0.057,
0.091, 0.089, 0.081, 0.1, 0.093, 0.086, 0.076,
0.094, 0.065, 0.087, 0.108, 0.114, 0.073, 0.105, 0.04)
d = data.frame( yi = r.fis,
vi = r.SE^2 )
# meta-analyze the replications
m = rma.uni( yi = r.fis, vi = r.SE^2, measure = "ZCOR" )
# probability of true effect above r = 0.10 = 28%
# convert threshold on r scale to Fisher's z
q = r_to_z(0.10)
# bootstrap reps should be higher in practice (e.g., 1000)
# hereusing only 100 for speed
prop_stronger( q = q,
M = m$b,
se.M = m$se,
t2 = m$tau2,
se.t2 = m$se.tau2,
tail = "above",
dat = d,
R = 100 )
# probability of true effect equally strong in opposite direction = very small
# convert threshold on r scale to Fisher's z
q.star = r_to_z(-0.10)
prop_stronger( q = q.star,
M = m$b,
se.M = m$se,
t2 = m$tau2,
se.t2 = m$se.tau2,
tail = "below",
dat = d,
R = 100 )
# probability of true effect equally strong in opposite direction = very small
q.star = r_to_z(-0.10)
prop_stronger( q = q.star,
M = m$b,
se.M = m$se,
t2 = m$tau2,
se.t2 = m$se.tau2,
tail = "below",
dat = d,
R = 250 )
document()
library(devtools)
document()
?prop_stronger
shap = shapiro.test(rnorm(100))
shap$p.value
source('~/Dropbox/Personal computer/Independent studies/MetaUtility R package/MetaUtility/R/functions.R')
source('~/Dropbox/Personal computer/Independent studies/MetaUtility R package/MetaUtility/R/functions.R')
?prop_stronger
document()
?prop_stronger
# calculate effect sizes for example dataset
d = metafor::escalc(measure="RR", ai=tpos, bi=tneg,
ci=cpos, di=cneg, data=metafor::dat.bcg)
# fit random-effects model
# note that metafor package returns on the log scale
m = metafor::rma.uni(yi= d$yi, vi=d$vi, knha=TRUE,
measure="RR", method="REML" )
# pooled point estimate (RR scale)
exp(m$b)
# estimate the proportion of effects stronger than RR = 0.80
# no bootstrapping will be needed
prop_stronger( q = log(0.8),
M = as.numeric(m$b),
t2 = m$tau2,
se.M = as.numeric(m$vb),
se.t2 = m$se.tau2,
CI.level = 0.95,
tail = "below",
bootstrap = "ifneeded")
prop_stronger( q = log(0.9),
M = as.numeric(m$b),
t2 = m$tau2,
se.M = as.numeric(m$vb),
se.t2 = m$se.tau2,
CI.level = 0.95,
tail = "below",
# below arguments control bootstrapping
# only 100 iterates for demo purposes (should be higher in practice)
dat = d,
R = 100,
bootstrap = "ifneeded",
yi.name = "yi",
vi.name = "vi" )
fake = (d$yi - m$b) / sqrt(d$vi + m$tau2)
shapiro.test(fake)
# replication estimates (Fisher's z scale) and SEs
# from moral credential example in reference #2
r.fis = c(0.303, 0.078, 0.113, -0.055, 0.056, 0.073,
0.263, 0.056, 0.002, -0.106, 0.09, 0.024, 0.069, 0.074,
0.107, 0.01, -0.089, -0.187, 0.265, 0.076, 0.082)
r.SE = c(0.111, 0.092, 0.156, 0.106, 0.105, 0.057,
0.091, 0.089, 0.081, 0.1, 0.093, 0.086, 0.076,
0.094, 0.065, 0.087, 0.108, 0.114, 0.073, 0.105, 0.04)
d = data.frame( yi = r.fis,
vi = r.SE^2 )
# meta-analyze the replications
m = rma.uni( yi = r.fis, vi = r.SE^2, measure = "ZCOR" )
# probability of true effect above r = 0.10 = 28%
# convert threshold on r scale to Fisher's z
q = r_to_z(0.10)
# bootstrap reps should be higher in practice (e.g., 1000)
# here using only 100 for speed
prop_stronger( q = q,
M = m$b,
se.M = m$se,
t2 = m$tau2,
se.t2 = m$se.tau2,
tail = "above",
dat = d,
R = 250 )
source('~/Dropbox/Personal computer/Independent studies/MetaUtility R package/MetaUtility/R/functions.R')
prop_stronger( q = q,
M = m$b,
se.M = m$se,
t2 = m$tau2,
se.t2 = m$se.tau2,
tail = "above",
dat = d,
R = 250 )
# probability of true effect equally strong in opposite direction
q.star = r_to_z(-0.10)
prop_stronger( q = q.star,
M = m$b,
se.M = m$se,
t2 = m$tau2,
se.t2 = m$se.tau2,
tail = "below",
dat = d,
R = 250 )
str_replace_all
string = c( "0.65 [0.6, 0.7]", "0.8(0.5, 0.9]", "1.2  [0.3, 1.5)")
parse_CI_string = function( string ) {
# standardize the CI brackets
ci.string = str_replace_all(string, "\\[", "\\(")
ci.string = str_replace_all(string, "\\]", "\\)")
# remove all spaces
ci.string = str_replace_all(ci.string, " ", "")
# parse CI string into est and upper limit
est = as.numeric( unlist( lapply( strsplit( ci.string, "\\("), function(x) x[1] ) ) )
# hi will be the last entry after the comma
hi = unlist( lapply( strsplit( string, ","), function(x) x[length(x)] ) )
hi = as.numeric( str_replace_all(hi, "\\)", "") )
# remove stupid characters
hi = as.numeric( str_remove_all( hi, "[) ,]" ) )
}
library(stringr)
parse_CI_string( string )
parse_CI_string( string =string)
parse_CI_string = function( string ) {
browser()
# standardize the CI brackets
ci.string = str_replace_all(string, "\\[", "\\(")
ci.string = str_replace_all(string, "\\]", "\\)")
# remove all spaces
ci.string = str_replace_all(ci.string, " ", "")
# parse CI string into est and upper limit
est = as.numeric( unlist( lapply( strsplit( ci.string, "\\("), function(x) x[1] ) ) )
# hi will be the last entry after the comma
hi = unlist( lapply( strsplit( string, ","), function(x) x[length(x)] ) )
hi = as.numeric( str_replace_all(hi, "\\)", "") )
# remove stupid characters
hi = as.numeric( str_remove_all( hi, "[) ,]" ) )
}
fake = 5
string = c( "0.65 [0.6, 0.7]", "0.8(0.5, 0.9]", "1.2  [0.3, 1.5)")
parse_CI_string( string =string)
ci.string
str_replace_all("0.65 [0.6, 0.7)", "\\[", "\\(")
str_replace_all( c("0.65 [0.6, 0.7)", "0.65 [0.6, 0.7)") "\\[", "\\(")
str_replace_all( c
), "\\[", "\\(")
str_replace_all( c("[", ")"), "\\[", "\\(")
mystring = c( "0.65 [0.6, 0.7]", "0.8(0.5, 0.9]", "1.2  [0.3, 1.5)")
parse_CI_string( mystring)
parse_CI_string( mystring)
ci.tsring
ci.string
mystring = c( "0.65 [0.6, 0.7]", "0.8(0.5, 0.9]", "1.2  [0.3, 1.5)")
parse_CI_string(mystring)
ci.string
parse_CI_string = function( string ) {
browser()
# standardize the CI brackets
string = str_replace_all(string, "\\[", "\\(")
string = str_replace_all(string, "\\]", "\\)")
# remove all spaces
string = str_replace_all(string, " ", "")
# parse CI string into est and upper limit
est = as.numeric( unlist( lapply( strsplit( string, "\\("), function(x) x[1] ) ) )
# hi will be the last entry after the comma
hi = unlist( lapply( strsplit( string, ","), function(x) x[length(x)] ) )
hi = as.numeric( str_replace_all(hi, "\\)", "") )
# remove stupid characters
hi = as.numeric( str_remove_all( hi, "[) ,]" ) )
}
mystring = c( "0.65 [0.6, 0.7]", "0.8(0.5, 0.9]", "1.2  [0.3, 1.5)")
parse_CI_string(mystring)
string
string
est
hi
string
parse_CI_string = function( string, sep = "," ) {
# standardize the CI brackets
string = str_replace_all(string, "\\[", "\\(")
string = str_replace_all(string, "\\]", "\\)")
# remove all spaces
string = str_replace_all(string, " ", "")
# parse CI string into est and upper limit
yi = as.numeric( unlist( lapply( strsplit( string, "\\("), function(x) x[1] ) ) )
# hi will be the last entry after the comma
hi = unlist( lapply( strsplit( string, sep), function(x) x[length(x)] ) )
hi = as.numeric( str_replace_all(hi, "\\)", "") )
# remove stupid characters
hi = as.numeric( str_remove_all( hi, "[) ,]" ) )
return( data.frame( yi, hi) )
}
mystring = c( "0.65 [0.6, 0.7]", "0.8(0.5, 0.9]", "1.2  [0.3, 1.5)")
parse_CI_string(mystring)
mystring = c( "0.65 [0.6- 0.7]", "0.8(0.5 - 0.9]", "1.2  [0.3 -1.5)")
parse_CI_string(mystring)
parse_CI_string(mystring, sep="-")
document()
?parse_CI_string
document()
?parse_CI_string
document()
?parse_CI_string
document()
?parse_CI_string
check()
check()
source('~/Dropbox/Personal computer/Independent studies/MetaUtility R package/MetaUtility/R/functions.R')
check()
build()
build()
