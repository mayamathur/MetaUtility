dat = d,
yi.name = "yi",
vi.name = "vyi")
rows = data.frame( Method = c("Parametric",
"Calib",
"NP sign"),
Est = c(Phat.p$Est,
Phat.c$Est,
Phat.s$Est),
Lo = c(Phat.p$lo,
Phat.c$lo,
Phat.s$lo),
Hi = c(Phat.p$hi,
Phat.c$hi,
Phat.s$hi)
)
return(rows)
}
rs %>% group_by(Method) %>%
summarise_all(mean)
sim.reps = 100
rs = foreach( i = 1:sim.reps, .combine=rbind ) %dopar% {
##### Simulate Dataset #####
d = sim_data( k = 50,
mu = 0.50,
V = 0.25,
muN = 150,
minN = 100,
sd.w = 1,
true.effect.dist = "expo" )
q = 0.50
# sanity check
mean(d$Mi)
mean(d$yi)
##### Try Each Method #####
m = rma.uni( yi = d$yi,
vi = d$vyi,
method = "REML" )
Phat.p = prop_stronger(q = q,
tail = "above",
M = m$b,
t2 = m$tau2,
se.M = m$se,
se.t2 = m$se.tau2,
estimate.method = "parametric",
ci.method = "parametric",
dat = d,
yi.name = "yi",
vi.name = "vyi")
Phat.c = prop_stronger(q = q,
tail = "above",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vyi")
Phat.s = prop_stronger(q = q,
tail = "above",
estimate.method = "calibrated",
ci.method = "sign.test",
dat = d,
yi.name = "yi",
vi.name = "vyi")
rows = data.frame( Method = c("Parametric",
"Calib",
"NP sign"),
Est = c(Phat.p$Est,
Phat.c$Est,
Phat.s$Est),
Lo = c(Phat.p$lo,
Phat.c$lo,
Phat.s$lo),
Hi = c(Phat.p$hi,
Phat.c$hi,
Phat.s$hi)
)
return(rows)
}
rs %>% group_by(Method) %>%
summarise_all(mean)
agg$phatBias = agg$Est - 0.50
agg = rs %>% group_by(Method) %>%
summarise_all(mean)
agg$phatBias = agg$Est - 0.50
agg
rs$Covers = covers(truth = 0.5, lo = rs$Lo, hi = rs$Hi)
agg = rs %>% group_by(Method) %>%
summarise_all(mean)
agg$phatBias = agg$Est - 0.50
View(agg)
sim.reps = 100
rs = foreach( i = 1:sim.reps, .combine=rbind ) %dopar% {
##### Simulate Dataset #####
d = sim_data( k = 50,
mu = 0.50,
V = 0.25,
muN = 150,
minN = 100,
sd.w = 1,
true.effect.dist = "expo" )
q = 0.3465736 # from previous code because mean != median for expo
# sanity check
mean(d$Mi)
mean(d$yi)
##### Try Each Method #####
m = rma.uni( yi = d$yi,
vi = d$vyi,
method = "REML" )
Phat.p = prop_stronger(q = q,
tail = "above",
M = m$b,
t2 = m$tau2,
se.M = m$se,
se.t2 = m$se.tau2,
estimate.method = "parametric",
ci.method = "parametric",
dat = d,
yi.name = "yi",
vi.name = "vyi")
Phat.c = prop_stronger(q = q,
tail = "above",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vyi")
Phat.s = prop_stronger(q = q,
tail = "above",
estimate.method = "calibrated",
ci.method = "sign.test",
dat = d,
yi.name = "yi",
vi.name = "vyi")
rows = data.frame( Method = c("Parametric",
"Calib",
"NP sign"),
Est = c(Phat.p$Est,
Phat.c$Est,
Phat.s$Est),
Lo = c(Phat.p$lo,
Phat.c$lo,
Phat.s$lo),
Hi = c(Phat.p$hi,
Phat.c$hi,
Phat.s$hi)
)
return(rows)
}
rs$Covers = covers(truth = 0.5, lo = rs$Lo, hi = rs$Hi)
agg = rs %>% group_by(Method) %>%
summarise_all(mean)
agg$phatBias = agg$Est - 0.50
View(agg)
document()
?prop_stronger
document()
?prop_stronger
document
document()
?prop_stronger
# estimate the proportion of effects stronger than RR = 0.80
# as recommended, use the calibrated approach for both point estimation and CI
# bootstrap reps should be higher in practice (e.g., 1000)
# here using only 100 for speed
prop_stronger( q = log(0.8),
tail = "below",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vi",
R = 100)
names(dat)
names(d)
document()
?prop_stronger
# calculate effect sizes for example dataset
d = metafor::escalc(measure="RR", ai=tpos, bi=tneg,
ci=cpos, di=cneg, data=metafor::dat.bcg)
# fit random-effects model
# note that metafor package returns on the log scale
m = metafor::rma.uni(yi= d$yi, vi=d$vi, knha=TRUE,
measure="RR", method="REML" )
# pooled point estimate (RR scale)
exp(m$b)
# estimate the proportion of effects stronger than RR = 0.80
# as recommended, use the calibrated approach for both point estimation and CI
# bootstrap reps should be higher in practice (e.g., 1000)
# here using only 100 for speed
prop_stronger( q = log(0.8),
tail = "below",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vyi",
R = 100)
d$vyi
names(d)
# calculate effect sizes for example dataset
d = metafor::escalc(measure="RR", ai=tpos, bi=tneg,
ci=cpos, di=cneg, data=metafor::dat.bcg)
# fit random-effects model
# note that metafor package returns on the log scale
m = metafor::rma.uni(yi= d$yi, vi=d$vi, knha=TRUE,
measure="RR", method="REML" )
# pooled point estimate (RR scale)
exp(m$b)
names(d)
prop_stronger( q = log(0.8),
tail = "below",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vi",
R = 100)
document()
?prop_stronger
?prop_stronger
# calculate effect sizes for example dataset
d = metafor::escalc(measure="RR", ai=tpos, bi=tneg,
ci=cpos, di=cneg, data=metafor::dat.bcg)
# fit random-effects model
# note that metafor package returns on the log scale
m = metafor::rma.uni(yi= d$yi, vi=d$vi, knha=TRUE,
measure="RR", method="REML" )
# pooled point estimate (RR scale)
exp(m$b)
# estimate the proportion of effects stronger than RR = 0.80
# as recommended, use the calibrated approach for both point estimation and CI
# bootstrap reps should be higher in practice (e.g., 1000)
# here using only 100 for speed
prop_stronger( q = log(0.8),
tail = "below",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vi",
R = 250)
# calculate effect sizes for example dataset
d = metafor::escalc(measure="RR", ai=tpos, bi=tneg,
ci=cpos, di=cneg, data=metafor::dat.bcg)
# fit random-effects model
# note that metafor package returns on the log scale
m = metafor::rma.uni(yi= d$yi, vi=d$vi, knha=TRUE,
measure="RR", method="REML" )
# pooled point estimate (RR scale)
exp(m$b)
# estimate the proportion of effects stronger than RR = 0.80
# as recommended, use the calibrated approach for both point estimation and CI
# bootstrap reps should be higher in practice (e.g., 1000)
# here using only 100 for speed
prop_stronger( q = log(0.8),
tail = "below",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vi",
R = 500)
exp(m$b)
# calculate effect sizes for example dataset
d = metafor::escalc(measure="RR", ai=tpos, bi=tneg,
ci=cpos, di=cneg, data=metafor::dat.bcg)
# fit random-effects model
# note that metafor package returns on the log scale
m = metafor::rma.uni(yi= d$yi, vi=d$vi, knha=TRUE,
measure="RR", method="REML" )
# pooled point estimate (RR scale)
exp(m$b)
# estimate the proportion of effects stronger than RR = 0.80
# as recommended, use the calibrated approach for both point estimation and CI
# bootstrap reps should be higher in practice (e.g., 1000)
# here using only 100 for speed
prop_stronger( q = log(0.7),
tail = "below",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vi",
R = 500)
document()
?prop_stronger
# calculate effect sizes for example dataset
d = metafor::escalc(measure="RR", ai=tpos, bi=tneg,
ci=cpos, di=cneg, data=metafor::dat.bcg)
# fit random-effects model
# note that metafor package returns on the log scale
m = metafor::rma.uni(yi= d$yi, vi=d$vi, knha=TRUE,
measure="RR", method="REML" )
# pooled point estimate (RR scale)
exp(m$b)
# estimate the proportion of effects stronger than RR = 0.70
# as recommended, use the calibrated approach for both point estimation and CI
# bootstrap reps should be higher in practice (e.g., 1000)
# here using fewer for speed
prop_stronger( q = log(0.7),
tail = "below",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vi",
R = 100)
# warning goes away with m
# calculate effect sizes for example dataset
d = metafor::escalc(measure="RR", ai=tpos, bi=tneg,
ci=cpos, di=cneg, data=metafor::dat.bcg)
# fit random-effects model
# note that metafor package returns on the log scale
m = metafor::rma.uni(yi= d$yi, vi=d$vi, knha=TRUE,
measure="RR", method="REML" )
# pooled point estimate (RR scale)
exp(m$b)
# estimate the proportion of effects stronger than RR = 0.70
# as recommended, use the calibrated approach for both point estimation and CI
# bootstrap reps should be higher in practice (e.g., 1000)
# here using fewer for speed
prop_stronger( q = log(0.7),
tail = "below",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vi",
R = 1000)
# warning goes away with m
prop_stronger( q = log(0.7),
M = as.numeric(m$b),
t2 = m$tau2,
se.M = as.numeric(m$vb),
se.t2 = m$se.tau2,
CI.level = 0.95,
tail = "below",
bootstrap = "ifneeded")
prop_stronger( q = log(0.7),
M = as.numeric(m$b),
t2 = m$tau2,
se.M = as.numeric(m$vb),
se.t2 = m$se.tau2,
CI.level = 0.95,
tail = "below",
bootstrap = "ifneeded")
prop_stronger( q = log(0.9),
M = as.numeric(m$b),
t2 = m$tau2,
se.M = as.numeric(m$vb),
se.t2 = m$se.tau2,
CI.level = 0.95,
tail = "below",
# below arguments control bootstrapping
# only 100 iterates for demo purposes (should be higher in practice)
dat = d,
R = 100,
bootstrap = "ifneeded",
yi.name = "yi",
vi.name = "vi" )
# replication estimates (Fisher's z scale) and SEs
# from moral credential example in reference #2
r.fis = c(0.303, 0.078, 0.113, -0.055, 0.056, 0.073,
0.263, 0.056, 0.002, -0.106, 0.09, 0.024, 0.069, 0.074,
0.107, 0.01, -0.089, -0.187, 0.265, 0.076, 0.082)
r.SE = c(0.111, 0.092, 0.156, 0.106, 0.105, 0.057,
0.091, 0.089, 0.081, 0.1, 0.093, 0.086, 0.076,
0.094, 0.065, 0.087, 0.108, 0.114, 0.073, 0.105, 0.04)
d = data.frame( yi = r.fis,
vi = r.SE^2 )
# meta-analyze the replications
m = metafor::rma.uni( yi = r.fis, vi = r.SE^2, measure = "ZCOR" )
# probability of true effect above r = 0.10 = 28%
# convert threshold on r scale to Fisher's z
q = r_to_z(0.10)
# bootstrap reps should be higher in practice (e.g., 1000)
# here using only 100 for speed
prop_stronger( q = q,
tail = "above",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vi",
R = 100 )
# probability of true effect equally strong in opposite direction
q.star = r_to_z(-0.10)
prop_stronger( q = q.star,
tail = "below",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vi",
R = 100 )
check()
?pct_pval
d = metafor::escalc(measure="RR", ai=tpos, bi=tneg,
ci=cpos, di=cneg, data=metafor::dat.bcg)
# test H0: the median is -0.3
# using only R = 100 for speed, but should be much larger (e.g., 2000) in practice
pct_pval( yi = d$yi,
sei = sqrt(d$vi),
mu = -0.3,
pct = 0.5,
R = 100 )
check()
?prop_stronger
document()
?prop_stronger
document()
?prop_stronger
check()
build()
system("R CMD Rd2pdf MyRpackage")
system("R CMD Rd2pdf MetaUtility")
install.packages("Rd2pdf")
check()
check()
check()
build()
188000*(9/12)*.1
188000*(10/12)*.1
15666.67+3000
15666.67+4000
15666.67*(1/.1)
15666.67*(1/.1)*(12/10)
188000*(10/12)*.1
15666.67+4000
188000*.1*(8/12)
188000*.15*(8/12)
188000*.15*(8/12)
4151-3468
63+50+30+70+31
244/60
sqrt(c(.01, .04, .25))
?prop_stronger
879-60
19,666.67+.1
19666.67*.1
188000*(9/12)*.1
16100*.1
16100+1610
18100*1.1
17100*1.1
188000*(9/12)*.1
17100*.1
14100+3000+ 1710
?prop_stronger
document()
library(devtools)
document()
?prop_stronger
document()
?prop_stronger_sign
?prop_stronger
# replication estimates (Fisher's z scale) and SEs
# from moral credential example in reference #2
r.fis = c(0.303, 0.078, 0.113, -0.055, 0.056, 0.073,
0.263, 0.056, 0.002, -0.106, 0.09, 0.024, 0.069, 0.074,
0.107, 0.01, -0.089, -0.187, 0.265, 0.076, 0.082)
r.SE = c(0.111, 0.092, 0.156, 0.106, 0.105, 0.057,
0.091, 0.089, 0.081, 0.1, 0.093, 0.086, 0.076,
0.094, 0.065, 0.087, 0.108, 0.114, 0.073, 0.105, 0.04)
d = data.frame( yi = r.fis,
vi = r.SE^2 )
# meta-analyze the replications
m = metafor::rma.uni( yi = r.fis, vi = r.SE^2, measure = "ZCOR" )
# probability of true effect above r = 0.10 = 28%
# convert threshold on r scale to Fisher's z
q = r_to_z(0.10)
# probability of true effect equally strong in opposite direction
q.star = r_to_z(-0.10)
prop_stronger( q = q.star,
tail = "below",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vi",
R = 100 )
# BCa fails to converge here
document()
?prop_stronger
prop_stronger( q = q.star,
tail = "below",
estimate.method = "calibrated",
ci.method = "calibrated",
dat = d,
yi.name = "yi",
vi.name = "vi",
R = 100 )
document()
check()
prop_stronger( q = q.star,
tail = "below",
estimate.method = "calibrated",
ci.method = "sign.test",
dat = d,
yi.name = "yi",
vi.name = "vi",
R = 100 )
?prop_stronger_sign
build()
round2 = function(x, digits = 2) {
formatC( round( x, digits ), format='f', digits=digits )
}
round2(.95)
round2(.95. 1)
round2(.95, 1)
round2(.95, 0)
round2(18.49, 0)
